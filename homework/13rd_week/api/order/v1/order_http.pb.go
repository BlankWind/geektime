// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http./middleware.
const _ = http1.SupportPackageIsVersion1

type OrderHTTPServer interface {
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderReply, error)

	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)

	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)

	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderReply, error)
}

func RegisterOrderHTTPServer(s http1.ServiceRegistrar, srv OrderHTTPServer) {
	s.RegisterService(&_HTTP_Order_serviceDesc, srv)
}

func _HTTP_Order_ListOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListOrderReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ListOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Order_CreateOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateOrderReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Order_GetOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetOrderReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Order_UpdateOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in UpdateOrderReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Order_serviceDesc = http1.ServiceDesc{
	ServiceName: "order.service.v1.Order",
	Methods: []http1.MethodDesc{

		{
			Path:    "/order.service.v1.Order/ListOrder",
			Method:  "POST",
			Handler: _HTTP_Order_ListOrder_0,
		},

		{
			Path:    "/order.service.v1.Order/CreateOrder",
			Method:  "POST",
			Handler: _HTTP_Order_CreateOrder_0,
		},

		{
			Path:    "/order.service.v1.Order/GetOrder",
			Method:  "POST",
			Handler: _HTTP_Order_GetOrder_0,
		},

		{
			Path:    "/order.service.v1.Order/UpdateOrder",
			Method:  "POST",
			Handler: _HTTP_Order_UpdateOrder_0,
		},
	},
	Metadata: "api/order/v1/order.proto",
}
