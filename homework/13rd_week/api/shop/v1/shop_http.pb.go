// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http./middleware.
const _ = http1.SupportPackageIsVersion1

type ShopInterfaceHTTPServer interface {
	AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemReply, error)

	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderReply, error)

	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)

	Index(context.Context, *IndexReq) (*IndexReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	ListCartItem(context.Context, *ListCartItemReq) (*ListCartItemReply, error)

	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)

	Login(context.Context, *LoginReq) (*LoginReply, error)

	Logout(context.Context, *LogoutReq) (*LogoutReply, error)

	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func RegisterShopInterfaceHTTPServer(s http1.ServiceRegistrar, srv ShopInterfaceHTTPServer) {
	s.RegisterService(&_HTTP_ShopInterface_serviceDesc, srv)
}

func _HTTP_ShopInterface_Index_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in IndexReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).Index(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_Register_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in RegisterReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).Register(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_Login_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in LoginReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).Login(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_Logout_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in LogoutReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).Logout(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_ListBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListBeerReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).ListBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_GetBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetBeerReq

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).GetBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_ListCartItem_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListCartItemReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).ListCartItem(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_AddCartItem_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in AddCartItemReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).AddCartItem(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_CreateOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateOrderReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).CreateOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_ShopInterface_ListOrder_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListOrderReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopInterfaceServer).ListOrder(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_ShopInterface_serviceDesc = http1.ServiceDesc{
	ServiceName: "shop.service.v1.ShopInterface",
	Methods: []http1.MethodDesc{

		{
			Path:    "/v1",
			Method:  "GET",
			Handler: _HTTP_ShopInterface_Index_0,
		},

		{
			Path:    "/v1/register",
			Method:  "POST",
			Handler: _HTTP_ShopInterface_Register_0,
		},

		{
			Path:    "/v1/login",
			Method:  "POST",
			Handler: _HTTP_ShopInterface_Login_0,
		},

		{
			Path:    "/v1/logout",
			Method:  "POST",
			Handler: _HTTP_ShopInterface_Logout_0,
		},

		{
			Path:    "/v1/catalog/beers",
			Method:  "GET",
			Handler: _HTTP_ShopInterface_ListBeer_0,
		},

		{
			Path:    "/v1/catalog/beers/{id}",
			Method:  "GET",
			Handler: _HTTP_ShopInterface_GetBeer_0,
		},

		{
			Path:    "/v1/cart",
			Method:  "GET",
			Handler: _HTTP_ShopInterface_ListCartItem_0,
		},

		{
			Path:    "/v1/cart",
			Method:  "POST",
			Handler: _HTTP_ShopInterface_AddCartItem_0,
		},

		{
			Path:    "/v1/orders",
			Method:  "POST",
			Handler: _HTTP_ShopInterface_CreateOrder_0,
		},

		{
			Path:    "/v1/orders",
			Method:  "GET",
			Handler: _HTTP_ShopInterface_ListOrder_0,
		},
	},
	Metadata: "api/shop/v1/shop.proto",
}
