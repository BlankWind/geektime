// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http./middleware.
const _ = http1.SupportPackageIsVersion1

type CatalogHTTPServer interface {
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)

	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)

	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)

	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)

	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
}

func RegisterCatalogHTTPServer(s http1.ServiceRegistrar, srv CatalogHTTPServer) {
	s.RegisterService(&_HTTP_Catalog_serviceDesc, srv)
}

func _HTTP_Catalog_ListBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListBeerReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Catalog_CreateBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateBeerReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Catalog_GetBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetBeerReq

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Catalog_UpdateBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in UpdateBeerReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Catalog_DeleteBeer_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in DeleteBeerReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteBeer(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Catalog_serviceDesc = http1.ServiceDesc{
	ServiceName: "catalog.v1.Catalog",
	Methods: []http1.MethodDesc{

		{
			Path:    "/api/v1/catalog/",
			Method:  "GET",
			Handler: _HTTP_Catalog_ListBeer_0,
		},

		{
			Path:    "/api/v1/catalog/",
			Method:  "POST",
			Handler: _HTTP_Catalog_CreateBeer_0,
		},

		{
			Path:    "/api/v1/catalog/{id}",
			Method:  "GET",
			Handler: _HTTP_Catalog_GetBeer_0,
		},

		{
			Path:    "/api/v1/catalog/",
			Method:  "PUT",
			Handler: _HTTP_Catalog_UpdateBeer_0,
		},

		{
			Path:    "/api/v1/cart/",
			Method:  "DELETE",
			Handler: _HTTP_Catalog_DeleteBeer_0,
		},
	},
	Metadata: "api/catalog/v1/catalog.proto",
}
