// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http./middleware.
const _ = http1.SupportPackageIsVersion1

type UserHTTPServer interface {
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)

	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)

	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)

	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)

	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)

	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)

	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)

	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)

	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)

	VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error)
}

func RegisterUserHTTPServer(s http1.ServiceRegistrar, srv UserHTTPServer) {
	s.RegisterService(&_HTTP_User_serviceDesc, srv)
}

func _HTTP_User_GetUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetUserReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_CreateUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateUserReq

	if err := dec(&in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_VerifyPassword_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in VerifyPasswordReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyPassword(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_ListAddress_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListAddressReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListAddress(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_CreateAddress_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateAddressReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateAddress(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_GetAddress_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetAddressReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAddress(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_ListCard_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in ListCardReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListCard(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_CreateCard_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateCardReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateCard(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_GetCard_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in GetCardReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCard(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_DeleteCard_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in DeleteCardReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteCard(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_User_serviceDesc = http1.ServiceDesc{
	ServiceName: "user.v1.User",
	Methods: []http1.MethodDesc{

		{
			Path:    "/api/v1/user/",
			Method:  "GET",
			Handler: _HTTP_User_GetUser_0,
		},

		{
			Path:    "/api/v1/user/",
			Method:  "POST",
			Handler: _HTTP_User_CreateUser_0,
		},

		{
			Path:    "/user.v1.User/VerifyPassword",
			Method:  "POST",
			Handler: _HTTP_User_VerifyPassword_0,
		},

		{
			Path:    "/user.v1.User/ListAddress",
			Method:  "POST",
			Handler: _HTTP_User_ListAddress_0,
		},

		{
			Path:    "/user.v1.User/CreateAddress",
			Method:  "POST",
			Handler: _HTTP_User_CreateAddress_0,
		},

		{
			Path:    "/user.v1.User/GetAddress",
			Method:  "POST",
			Handler: _HTTP_User_GetAddress_0,
		},

		{
			Path:    "/user.v1.User/ListCard",
			Method:  "POST",
			Handler: _HTTP_User_ListCard_0,
		},

		{
			Path:    "/user.v1.User/CreateCard",
			Method:  "POST",
			Handler: _HTTP_User_CreateCard_0,
		},

		{
			Path:    "/user.v1.User/GetCard",
			Method:  "POST",
			Handler: _HTTP_User_GetCard_0,
		},

		{
			Path:    "/user.v1.User/DeleteCard",
			Method:  "POST",
			Handler: _HTTP_User_DeleteCard_0,
		},
	},
	Metadata: "api/user/v1/user.proto",
}
