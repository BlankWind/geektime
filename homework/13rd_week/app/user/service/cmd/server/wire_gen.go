// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"demo/app/user/service/internal/biz"
	"demo/app/user/service/internal/conf"
	"demo/app/user/service/internal/data"
	"demo/app/user/service/internal/data/cache"
	"demo/app/user/service/internal/data/db"
	"demo/app/user/service/internal/server"
	"demo/app/user/service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	client := db.NewEntClient(confData, logger)
	dbData, cleanup, err := db.NewData(client, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := db.NewUserRepo(dbData, logger)
	redisClient := cache.NewRedisClient(confData, logger)
	cacheData, cleanup2, err := cache.NewData(redisClient, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userCache := cache.NewUserCache(cacheData, logger)
	bizUserRepo := data.NewUserRepo(userRepo, userCache, logger)
	userUseCase := biz.NewUserUseCase(bizUserRepo, logger)
	cardRepo := db.NewCardRepo(dbData, logger)
	cardUseCase := biz.NewCardUseCase(cardRepo, logger)
	addressRepo := db.NewAddressRepo(dbData, logger)
	addressUseCase := biz.NewAddressUseCase(addressRepo, logger)
	userService := service.NewUserService(userUseCase, cardUseCase, addressUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, logger, tracerProvider, userService)
	httpServer := server.NewHTTPServer(confServer, userService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
